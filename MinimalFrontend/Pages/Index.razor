@page "/"
@using Microsoft.Fast.Components.FluentUI
@using MinimalFrontend.Controller
@using MinimalFrontend.Models
@inject IUserRepositoryController _userRepositoryController

<div class="center">
    <FluentTabs id="myTab" activeId="TabOne" style="margin: auto; text-align: center">
        <FluentTab id="TabOne">Update persons</FluentTab>
        <FluentTab id="TabTwo">Get persons by max age</FluentTab>
        <FluentTab id="TabThree">Get specific person by id</FluentTab>
        <FluentTab id="TabFour">Add new person</FluentTab>
        <FluentTab id="TabFive">Change person data</FluentTab>
        <FluentTab id="TabSix">Delete person</FluentTab>
        <div style="margin-top: 10px; margin-bottom: 10px"></div>
        <FluentTabPanel id="TabPanelOne">
            <FluentDivider style="width: 777px"/>
            <div style="margin: auto;">
                <p class="cst-p">Commit to get an update from the database.</p>
                <FluentButton Appearance="Appearance.Accent" @onclick="FetchAll" style="width: 400px">COMMIT</FluentButton>
            </div>
        </FluentTabPanel>
        <FluentTabPanel id="TabPanelTwo">
            <FluentDivider style="width: 777px"/>
            <div style="margin: auto;">
                <p class="cst-p">Enter the maximum age and commit to get a list of persons of that age or less.</p>
                <FluentNumberField Min="0" Max="100" @bind-Value="@_selectedAge" style="width: 400px"></FluentNumberField>
                <FluentButton Appearance="Appearance.Accent" @onclick="GetByAge" style="width: 400px">COMMIT</FluentButton>
            </div>
        </FluentTabPanel>
        <FluentTabPanel id="TabPanelThree">
            <FluentDivider style="width: 777px"/>
            <div style="margin: auto;">
                <p class="cst-p">Enter an id and commit to search for that specific person.</p>
                <FluentSelect @bind-Value="@_selectedId" style="width: 400px">
                    @foreach (var iD in _userIds)
                    {
                        <FluentOption Value="@iD">@iD</FluentOption>
                    }
                </FluentSelect>
                <FluentButton Appearance="Appearance.Accent" @onclick="GetById" style="width: 400px">COMMIT</FluentButton>
            </div>
        </FluentTabPanel>
        <FluentTabPanel id="TabPanelFour">
            <FluentDivider style="width: 777px"/>
            <div style="margin: auto;">
                <p class="cst-p">Enter the desired values (all fields required) to add a new person to the database.</p>
                <FluentTextField Appearance="Appearance.Accent" Minlength="1" Maxlength="100" Placeholder="name" @bind-Value="@_createUsername" style="width: 400px"/>
                <FluentTextField Appearance="Appearance.Accent" Minlength="1" Maxlength="100" Placeholder="mail" @bind-value="@_createMail" style="width: 400px"/>
                <FluentNumberField Min="0" Max="100" Placeholder="age" @bind-Value="@_createAge" style="width: 400px"></FluentNumberField>
                <FluentButton Appearance="Appearance.Accent" style="width: 400px"  @onclick="Create">COMMIT</FluentButton>
            </div>
        </FluentTabPanel>
        <FluentTabPanel id="TabPanelFive">
            <FluentDivider style="width: 777px"/>
            <div style="margin: auto;">
                <p class="cst-p">Choose a person by its id, change the desired values and commit.</p>
                <FluentSelect @bind-Value="@_selectedId" style="width: 400px">
                    @foreach (var iD in _userIds)
                    {
                        <FluentOption Value="@iD">@iD</FluentOption>
                    }
                </FluentSelect>
                <FluentTextField Appearance="Appearance.Accent" Minlength="1" Maxlength="100" Placeholder="name" @bind-Value="@_createUsername" style="width: 400px"/>
                <FluentTextField Appearance="Appearance.Accent" Minlength="1" Maxlength="100" Placeholder="mail" @bind-Value="@_createMail" style="width: 400px"/>
                <FluentNumberField Min="0" Max="100" Placeholder="age" style="width: 400px" @bind-Value= "@_createAge"></FluentNumberField>
                <FluentButton Appearance="Appearance.Accent" style="width: 400px" @onclick="Update">COMMIT</FluentButton>
            </div>
        </FluentTabPanel>
        <FluentTabPanel id="TabPanelSix">
            <FluentDivider style="width: 777px"/>
            <div style="margin: auto;">
                <p class="cst-p">Choose a person by its id and commit to delete it from the database.</p>
                <FluentNumberField Min="1" Placeholder="id from person to delete" @bind-Value="@_selectedId" style="width: 400px"></FluentNumberField>
                <FluentButton Appearance="Appearance.Accent" style="width: 400px" @onclick="Delete">COMMIT</FluentButton>
            </div>
        </FluentTabPanel>
    </FluentTabs>
</div>

<div class="center">
    @foreach (var user in _users)
    {
        <p>Id: @user.Id | Mail: @user.Mail | Name: @user.UserName | Age: @user.Age</p>
        <FluentDivider style="width: 777px"/>
    }
</div>

@code
{
    private List<ServiceUser> _users = new();
    private readonly List<int> _userIds = new();
    private ServiceUser _selectedUser = new();
    private int _selectedAge;
    private int _selectedId = 1;
    private int _createAge;
    private string _createUsername = "";
    private string _createMail = "";

    protected override async Task OnInitializedAsync()
    {
        var response = await _userRepositoryController.GetAllUsers();
        _users = response.ToList();
        foreach (var user in _users)
        {
            _userIds.Add(user.Id);
        }
    }

    private async Task FetchAll()
    {
        var response = await _userRepositoryController.GetAllUsers();
        _users = response.ToList();
        StateHasChanged();
    }

    private async Task GetByAge()
    {
        var response = await _userRepositoryController.GetAllUsersByAge(_selectedAge);
        _users = response.ToList();
        StateHasChanged();
    }

    private async Task GetById()
    {
        var response = await _userRepositoryController.GetUserById(_selectedId);
        _users.Clear();
        _users.Add(response);
        StateHasChanged();
    }

    private async Task Create()
    {
        await _userRepositoryController.Create(_createUsername, _createMail, _createAge);
    }

    private void UpdateBoundValue()
    {
        _selectedUser = _users.First(p => p.Id == _selectedId);
        StateHasChanged();
    }

    private async Task Update()
    {
        await _userRepositoryController.Update(_selectedId, _createUsername, _createMail, _createAge);
    }

    private async Task Delete()
    {
        await _userRepositoryController.Delete(_selectedId);
    }

    private void UpdateBoundValues()
    {
        //
    }
}

